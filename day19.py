from IntcodeStepper import IntcodeStepper, GAME_OVER, REQUEST_INPUT
import numpy as np


with open('day19.in') as f:
    s_program = f.read().strip()
scanner_program = [int(x) for x in s_program.split(',')]

beam_str = """
#.......................................................................................................................................................................................................
...##...................................................................................................................................................................................................
......###...............................................................................................................................................................................................
.........####...........................................................................................................................................................................................
...........######.......................................................................................................................................................................................
..............#######...................................................................................................................................................................................
.................########...............................................................................................................................................................................
....................#########...........................................................................................................................................................................
......................############......................................................................................................................................................................
.........................#############..................................................................................................................................................................
............................##############..............................................................................................................................................................
..............................################..........................................................................................................................................................
.................................#################......................................................................................................................................................
....................................##################..................................................................................................................................................
.......................................###################..............................................................................................................................................
.........................................######################.........................................................................................................................................
............................................#######################.....................................................................................................................................
...............................................########################.................................................................................................................................
.................................................##########################.............................................................................................................................
....................................................###########################.........................................................................................................................
.......................................................############################.....................................................................................................................
..........................................................#############################.................................................................................................................
............................................................################################............................................................................................................
...............................................................#################################........................................................................................................
..................................................................##################################....................................................................................................
....................................................................####################################................................................................................................
.......................................................................#####################################............................................................................................
..........................................................................######################################........................................................................................
.............................................................................#######################################....................................................................................
...............................................................................#########################################................................................................................
..................................................................................###########################################...........................................................................
.....................................................................................############################################.......................................................................
........................................................................................#############################################...................................................................
..........................................................................................###############################################...............................................................
.............................................................................................################################################...........................................................
................................................................................................#################################################.......................................................
..................................................................................................###################################################...................................................
.....................................................................................................#####################################################..............................................
........................................................................................................######################################################..........................................
...........................................................................................................#######################################################......................................
.............................................................................................................#########################################################..................................
................................................................................................................##########################################################..............................
...................................................................................................................###########################################################..........................
.....................................................................................................................#############################################################......................
........................................................................................................................###############################################################.................
...........................................................................................................................################################################################.............
..............................................................................................................................#################################################################.........
................................................................................................................................###################################################################.....
...................................................................................................................................####################################################################.
......................................................................................................................................##################################################################
""".strip()


## Build generator for x, y position sweep
## :
##     for y in range(N):

def part1():
    N = 50

    def run_scanner(pos):
        this_prog = IntcodeStepper(scanner_program)
        pos_iterator = iter(pos)
        while True:
            next_result = this_prog.next()
            while next_result == REQUEST_INPUT:
                next_result = this_prog.next(next(pos_iterator))
            if next_result == GAME_OVER:
                raise ValueError("Reached GAME_OVER without receiving ouput")
            else:
                return(next_result)

    str_mapper = {0: '.', 1: '#'}
    beam_map = np.zeros((N, N), dtype=str)
    scan_value = {(x,y):run_scanner((x,y)) for x in range(N) for y in range(N)}
    count_beam_pos = 0
    for p, v in scan_value.items():
        beam_map[p] = str_mapper[v]
        count_beam_pos += v

    print(f"Num beams: {count_beam_pos}")
    print("\n".join([' '.join(row) for row in beam_map]))



def part2():
    Nx = 50
    Ny = 200

    def run_scanner(pos):
        this_prog = IntcodeStepper(scanner_program)
        pos_iterator = iter(pos)
        while True:
            next_result = this_prog.next()
            while next_result == REQUEST_INPUT:
                next_result = this_prog.next(next(pos_iterator))
            if next_result == GAME_OVER:
                raise ValueError("Reached GAME_OVER without receiving ouput")
            else:
                return(next_result)

    int_lookup = {'#':1, '.':0}
    beam_map = np.array([[int_lookup[s] for s in row] for row in beam_str.split('\n')])

    bot_beam = [min(np.where(row == 1)[0]) for row in beam_map][:-10]
    top_beam  = [max(np.where(row == 1)[0]) for row in beam_map][:-10]

    def get_single_len(*args):
        l = {len(arg) for arg in args}
        if len(l) > 1:
            raise ValueError("Not all items have the same length")
        return next(iter(l))

    print("BOT:", bot_beam)
    print("TOP:", top_beam)

    og_bot_beam = bot_beam[0:6]
    og_top_beam = top_beam[0:6]

    bot_beam = bot_beam[0:1]
    top_beam = top_beam[0:1]

    for i in range(5):
        x_next = get_single_len(bot_beam, top_beam)

        pos = [x_next, bot_beam[-1]]
        while run_scanner(pos) == 0:
            pos[1] += 1
        bot_beam.append(pos[1])

        pos = [x_next, bot_beam[-1]]
        while run_scanner(pos) == 1:
            pos[1] += 1
        top_beam.append(pos[1] - 1)


    assert(bot_beam == og_bot_beam)
    assert(top_beam == og_top_beam)

    n_target = 100
    for i in range(900):

        bot_y_intercept = len(bot_beam) + bot_beam[-1]
        top_y_intercept = len(top_beam) + top_beam[-1]

        if bot_y_intercept <= top_y_intercept:
            pos = [len(bot_beam), bot_beam[-1]]
            while run_scanner(pos) == 0:
                pos[1] += 1
            bot_beam.append(pos[1])
        else:
            pos = [len(top_beam), top_beam[-1]]
            while run_scanner(pos) == 1:
                pos[1] += 1
            top_beam.append(pos[1] - 1)

        success = False
        x_bot = len(bot_beam) - 1
        max_x_search = max(x_bot-(n_target-1), 0)
        for x_top, y_top in enumerate(top_beam[:max_x_search+1]):
            y_bot = pos[1]
            if y_top - y_bot >= (n_target - 1):
                beam_pos = [x_top, y_bot]
                print(f"FOUND SUCCESS!: top = ({x_top}, {y_top}) || bot = ({x_bot}, {y_bot})")
                dx = x_bot - x_top - (n_target - 1)
                dy = y_top - y_bot - (n_target - 1)
                print("EXCESS POS:", dx, dy)
                beam_pos[0] -= dx
                beam_pos[1] -= dy
                success = True
                print("RESULT:", int(beam_pos[0] * 10E3 + beam_pos[1]))
                break
        if success:
            break


if __name__ == "__main__":
    # part1()
    part2()
